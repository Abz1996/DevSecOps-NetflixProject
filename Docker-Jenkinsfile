pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        SONAR_TOKEN = credentials('Sonar-token')
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/uniquesreedhar/DevSecOps-NetflixProject.git'
            }
        }
        stage("SonarQube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                    $SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.projectName=Netflix \
                    -Dsonar.projectKey=Netflix \
                    -Dsonar.host.url=http://34.224.38.55:9000 \
                    -Dsonar.login=$SONAR_TOKEN
                    '''
                }
            }
        }
        stage("Quality Gate") {
            steps {
                script {
                    timeout(time: 5, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh '''
                npm install
                npm audit fix --force  # Fix vulnerabilities automatically
                '''
            }
        }
        stage('OWASP Dependency Check') {
            steps {
                script {
                    try {
                        sh '''
                        dependency-check.sh --project "Netflix" --scan . --format "HTML" --out ./dependency-check-report
                        '''
                    } catch (Exception e) {
                        echo "⚠️ OWASP Dependency Check failed but continuing..."
                    }
                }
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                script {
                    try {
                        dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                        dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                    } catch (Exception e) {
                        echo "⚠️ OWASP FS SCAN failed but continuing..."
                    }
                }
            }
        }
        stage('Trivy File System Scan') {
            steps {
                script {
                    try {
                        sh "trivy fs . > trivyfs.txt"
                    } catch (Exception e) {
                        echo "⚠️ TRIVY FS SCAN failed but continuing..."
                    }
                }
            }
        }
        stage("Docker Build & Push") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {   
                        sh "docker build --build-arg TMDB_V3_API_KEY=0ee38f4938fc77720ee0ffc7a1f46d94 -t netflix ."
                        sh "docker tag netflix sreedhar8897/netflix:latest"
                        sh "docker push sreedhar8897/netflix:latest"
                    }
                }
            }
        }
        stage("Trivy Image Scan") {
            steps {
                script {
                    try {
                        sh "trivy image sreedhar8897/netflix:latest > trivyimage.txt"
                    } catch (Exception e) {
                        echo "⚠️ TRIVY Image Scan failed but continuing..."
                    }
                }
            }
        }
        stage('Deploy to Container') {
            steps {
                sh 'docker run -d --name netflix -p 8081:80 sreedhar8897/netflix:latest'
            }
        }
    }
}
